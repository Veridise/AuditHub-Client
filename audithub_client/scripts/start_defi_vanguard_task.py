import logging
import sys
from typing import Annotated, Optional

from cyclopts import Parameter

from ..api.get_configuration import api_get_configuration
from ..api.monitor_task import MonitorTaskArgs, api_monitor_task
from ..api.start_defi_vanguard_task import (
    StartDeFiVanguardTaskArgs,
    api_start_defi_vanguard_task,
)
from ..library.invocation_common import (
    AuditHubContextType,
    OrganizationIdType,
    ProjectIdType,
    VersionIdType,
    app,
)

logger = logging.getLogger(__name__)


@app.command
def start_defi_vanguard_task(
    *,
    organization_id: OrganizationIdType,
    project_id: ProjectIdType,
    version_id: VersionIdType,
    name: Optional[str] = None,
    detector: Annotated[
        list[str], Parameter(validator=lambda _t, v: len(v) > 0, consume_multiple=True)
    ],
    input_limit: Optional[list[str]] = None,
    wait: bool = False,
    rpc_context: AuditHubContextType,
):
    """
    Start a Vanguard (static analysis) task for a specific version of a project. Outputs the task id.

    Parameters
    ----------
    name:
        An optional task name for this task. If not specified, one will automatically be generated by AuditHub.

    detector:
        One or more detector(s) to use for analyzing the sources. For a list of valid detector names, please run `ah get-configuration vanguard_defi_detectors`.

    input_limit:
        An optional list of source files or directories. If not specified, Vanguard will process all Solidity sources inside the source path specified at the project definitiojn.
    wait:
        If specified, this script will monitor the task and wait for it to finish. The exit code will reflect the success or failure of the task, regardless of findings produced by the analysis.
    """
    try:
        configuration = api_get_configuration(rpc_context)
        supported_detectors = set(
            [e["code"] for e in configuration["vanguard_defi_detectors"]]
        )
        for d in detector:
            if d not in supported_detectors:
                raise ValueError(f"'{d}' is not a valid detector name.")

        rpc_input = StartDeFiVanguardTaskArgs(
            organization_id=organization_id,
            project_id=project_id,
            version_id=version_id,
            name=name,
            detector=detector,
            input_limit=input_limit,
        )
        logger.debug("Starting...")
        logger.debug(str(rpc_input))
        ret = api_start_defi_vanguard_task(rpc_context, rpc_input)
        logger.debug("Response: %s", ret)
        task_id = ret["task_id"]
        print(task_id)
        if wait:
            result = api_monitor_task(
                rpc_context,
                MonitorTaskArgs(
                    organization_id=rpc_input.organization_id, task_id=task_id
                ),
            )
        logger.debug("Finished.")
        if wait and not result:
            sys.exit(1)
    except Exception as ex:
        logger.error("Error %s", str(ex), exc_info=ex)
